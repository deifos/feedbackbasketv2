// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  projects      Project[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  url         String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customization ProjectCustomization?
  feedback      Feedback[]

  // Performance indexes
  @@index([userId])
  @@index([userId, updatedAt])
  @@map("project")
}

model ProjectCustomization {
  id             String  @id @default(cuid())
  projectId      String  @unique
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  buttonColor    String  @default("#3b82f6")
  buttonRadius   Int     @default(8)
  buttonLabel    String  @default("Feedback")
  introMessage   String  @default("We'd love to hear your thoughts! Your feedback helps us improve.")
  successMessage String  @default("Thank you for your feedback!")

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("project_customization")
}

model Feedback {
  id        String        @id @default(cuid())
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  content   String
  email     String?
  status    FeedbackStatus @default(PENDING)
  notes     String?

  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance indexes
  @@index([projectId])
  @@index([status])
  @@index([projectId, status])
  @@index([projectId, createdAt])
  @@index([createdAt])
  @@index([ipAddress, createdAt]) // For rate limiting queries
  @@map("feedback")
}

enum FeedbackStatus {
  PENDING
  REVIEWED
  DONE
}
