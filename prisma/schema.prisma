// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  
  // Telegram integration
  telegramHandle String?   // User's Telegram handle (e.g., @username)
  telegramChatId String?   // User's Telegram Chat ID (captured from bot interaction)
  telegramLinkCode String? // Temporary code for linking Telegram account
  telegramLinkCodeExp DateTime? // Expiration time for the link code
  
  sessions      Session[]
  accounts      Account[]
  projects      Project[]
  subscription  Subscription?
  usagePeriods  UsagePeriod[]
  payments      Payment[]
  apiKeys       ApiKey[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  url         String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // AI-enhanced project metadata
  description      String?  // AI-generated or manual description
  logoUrl          String?  // Favicon or brand logo URL
  ogImageUrl       String?  // OpenGraph image URL for backgrounds
  scrapedMetadata  Json?    // Raw scraped metadata from Firecrawl
  aiGenerated      Boolean  @default(false) // Whether description is AI-generated
  lastAnalyzedAt   DateTime? // When last analyzed with AI

  // Telegram notifications
  telegramNotifications Boolean @default(true) // Enable/disable Telegram notifications for this project

  customization ProjectCustomization?
  feedback      Feedback[]
  apiKeyAccess  ApiKeyProjectAccess[]

  // Performance indexes
  @@index([userId])
  @@index([userId, updatedAt])
  @@index([aiGenerated]) // For filtering AI vs manual projects
  @@map("project")
}

model ProjectCustomization {
  id             String  @id @default(cuid())
  projectId      String  @unique
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  buttonColor    String  @default("#3b82f6")
  buttonRadius   Int     @default(8)
  buttonLabel    String  @default("Feedback")
  introMessage   String  @default("We'd love to hear your thoughts! Your feedback helps us improve.")
  successMessage String  @default("Thank you for your feedback!")

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("project_customization")
}

model Feedback {
  id        String        @id @default(cuid())
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  content   String
  email     String?
  status    FeedbackStatus @default(PENDING)
  notes     String?

  // AI-powered analysis fields
  category          FeedbackCategory? // AI-assigned category
  sentiment         Sentiment?        // AI-assigned sentiment
  categoryConfidence Float?           // AI confidence score (0-1)
  sentimentConfidence Float?          // AI confidence score (0-1)
  aiReasoning       String?           // AI explanation for the analysis
  analysisMethod    String?           // 'AI' or 'FALLBACK' - method used for analysis
  isAiAnalyzed      Boolean @default(false) // Whether AI analysis has been performed
  aiAnalyzedAt      DateTime?         // When AI analysis was performed
  
  // Manual override fields (user can override AI)
  manualCategory    FeedbackCategory? // User-assigned category override
  manualSentiment   Sentiment?        // User-assigned sentiment override
  categoryOverridden Boolean @default(false) // Whether user overrode AI category
  sentimentOverridden Boolean @default(false) // Whether user overrode AI sentiment

  // Visibility control for subscription limits
  isVisible     Boolean  @default(true)  // Controls if feedback is shown based on plan limits
  visibilityRank Int?                    // Rank for determining which feedback to show (newest first)

  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance indexes
  @@index([projectId])
  @@index([status])
  @@index([projectId, status])
  @@index([projectId, createdAt])
  @@index([createdAt])
  @@index([ipAddress, createdAt]) // For rate limiting queries
  @@index([category]) // For category filtering
  @@index([sentiment]) // For sentiment filtering
  @@index([projectId, category]) // For project category analysis
  @@index([projectId, sentiment]) // For project sentiment analysis
  @@index([projectId, createdAt, category]) // For trend analysis
  @@index([projectId, isVisible, createdAt]) // For visibility filtering
  @@index([projectId, visibilityRank]) // For visibility ranking
  @@map("feedback")
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId      String?       @unique
  stripeSubscriptionId  String?       @unique
  stripePriceId         String?

  plan              SubscriptionPlan  @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)

  // Current billing period
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?

  // Usage tracking for current period
  feedbackUsedThisPeriod Int          @default(0)
  projectCount          Int           @default(0)

  // Plan limits (cached for performance)
  feedbackLimit         Int           @default(100)
  projectLimit          Int           @default(1)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscription")
}

model UsagePeriod {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  periodStart   DateTime
  periodEnd     DateTime
  plan          SubscriptionPlan

  feedbackCount Int      @default(0)
  feedbackLimit Int

  createdAt     DateTime @default(now())

  @@index([userId, periodStart])
  @@map("usage_period")
}

enum FeedbackStatus {
  PENDING
  REVIEWED
  DONE
}

enum FeedbackCategory {
  BUG
  FEATURE
  REVIEW
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  PENDING
  REFUNDED
  PARTIALLY_REFUNDED
}

model Payment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe identifiers
  stripeInvoiceId    String  @unique
  stripePaymentIntentId String?
  stripeSubscriptionId String?
  
  // Payment details
  amount            Int              // Amount in cents
  currency          String           @default("usd")
  status            PaymentStatus
  
  // Plan information at time of payment
  planAtPayment     SubscriptionPlan
  billingCycle      String?          // "monthly" or "annual"
  
  // Timestamps
  paidAt            DateTime?        // When payment was actually processed
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Additional metadata
  description       String?          // Payment description from Stripe
  failureReason     String?          // If payment failed, the reason
  
  @@index([userId])
  @@index([status])
  @@index([paidAt])
  @@index([planAtPayment])
  @@map("payment")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name      String   // e.g., "Claude Desktop", "Cursor IDE"
  key       String   @unique // The actual API key (fb_key_...)
  
  // Project access control (similar to telegram notifications)
  projectAccess ApiKeyProjectAccess[]
  
  // Usage tracking
  lastUsed     DateTime?
  usageCount   Int      @default(0)
  
  // Security
  isActive     Boolean  @default(true)
  scopes       String[] @default(["read:projects", "read:feedback"]) // Future extensibility
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([key])
  @@index([userId, isActive])
  @@map("api_key")
}

model ApiKeyProjectAccess {
  id        String  @id @default(cuid())
  apiKeyId  String
  apiKey    ApiKey  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  enabled   Boolean @default(true)
  createdAt DateTime @default(now())
  
  @@unique([apiKeyId, projectId])
  @@index([apiKeyId])
  @@index([projectId])
  @@map("api_key_project_access")
}

model WebhookEvent {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique
  eventType       String
  processed       Boolean  @default(false)
  processedAt     DateTime?
  errorMessage    String?
  retryCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([stripeEventId])
  @@index([eventType])
  @@index([processed])
  @@index([createdAt])
  @@map("webhook_event")
}
